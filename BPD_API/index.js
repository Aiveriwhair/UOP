const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { Constants, VideoProcessor } = require('./src/export.js');

const app = express();


const port = Constants.port;
const directoryPath = Constants.videoUploadDir;
const deteleVideoAfterProcessing = Constants.deteleVideoAfterProcessing;



const storage = multer.diskStorage({
  destination: directoryPath,
  filename: (req, file, callback) => {
    callback(null, `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ storage });
app.use(express.json());


app.post('/upload', upload.single('video'), (req, res) => {
  if (!req.file) {
    return res.status(400).send('No files were uploaded.');
  }
  const inputPath = req.file.path; // Generated by multer middleware
  const rois = req.body.rois; // [{x, y, width, height}, ...]
  const mode = req.body.mode; // '0' -> breathing or 1 -> heart
  
  try{
    const videoProcessor = new VideoProcessor();
    results = videoProcessor.computeRates(inputPath, JSON.parse(rois), mode);
    
    if (deteleVideoAfterProcessing) {
      fs.unlink(inputPath, (err) => {
        if (err) {
          console.error(err);
          return;
        }
      });
    }

    res.status(200).json(results);
  }
  catch(err){
    res.status(400).send(err.message);
  }
});


app.post('/previewROI', upload.single('video'), (req, res) => {
  const inputPath = req.file.path; // Generated by multer middleware
  const roi = JSON.parse(req.body.roi); // {x, y, width, height}
  const x = roi.x;
  const y = roi.y;
  const w = roi.width;
  const h = roi.height;

  const videoProcessor = new VideoProcessor();
  let previewImagePath = videoProcessor.previewRoiPosition(inputPath, x, y, w, h);


  if (deteleVideoAfterProcessing) {
    fs.unlink(inputPath, (err) => {
      if (err) {
        console.error(err);
        return;
      }
    });
  }
 // Send the preview image
 res.sendFile(previewImagePath, (err) => {
    if (err) {
      console.error(err);
    }

    // Delete the preview image after sending
    setTimeout(() => {
      fs.unlink(previewImagePath, (err) => {
        if (err) {
          console.error(err);
        }
      });
    }, 10000);
  });
});



app.listen(port, () => {
  console.log(`BDP_API started on port ${port}`);
});
